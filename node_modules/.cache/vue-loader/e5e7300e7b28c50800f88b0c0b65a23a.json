{"remainingRequest":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/src/views/curso/Tema1.vue?vue&type=template&id=aa56040c&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/src/views/curso/Tema1.vue","mtime":1753760377130},{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Condiciones_Seguridad_Salud_Trabajo/U3_Condiciones_Seguridad_Salud_Trabajo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}